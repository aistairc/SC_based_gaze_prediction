diff --git a/Demo_WSC.m b/Demo_WSC.m
index 1e0f8d2..36f6cb6 100644
--- a/Demo_WSC.m
+++ b/Demo_WSC.m
@@ -16,18 +16,18 @@ Dir_result='Sals\'; %the saliency results
 imnames=dir([Dir_img '*' 'jpg']);
 
 %% weighted sparse parameters
-param.lambda=0.01; % not more than 20 non-zeros coefficients
+param.lambda=0.01; %0.01 not more than 20 non-zeros coefficients
 param.mode=2; 
 %superpixel parameters
-spnumber=300;  %superpixel number
-num_bins = 32; %number of bins when forming histogram
+spnumber=300;  %500superpixel number
+num_bins = 4; %32number of bins when forming histogram
 
 % Cut the edge if it contains frame borders
 cut_edge = true;
 
 
 %%
-for ii=1:length(imnames)   
+for ii=1:length(imnames)
     % load image
     imnamedir=[Dir_img imnames(ii).name]; 
     img=imread(imnamedir);
@@ -52,6 +52,7 @@ for ii=1:length(imnames)
     [F1,D1]=get_feature_matrix(img,superpixel,focus_feature,depth_feature,'histogram');
     [F2,D2]=get_feature_matrix(img,superpixel,focus_feature,depth_feature,'average');
 
+    [AA,BB,rr,F1,F2]=canoncorr(F1,F2);
     %get sparsity saliency
     saliencyMap=WSC_saliency(F1,D1,F2,D2,param,superpixel,num_bins,focus_feature);
     
@@ -64,7 +65,7 @@ for ii=1:length(imnames)
     %fill the cutted borders 
     saliencyMap = [zeros(size(saliencyMap,1),cut_pixels),saliencyMap,zeros(size(saliencyMap,1),cut_pixels)];
     saliencyMap = [zeros(cut_pixels,size(saliencyMap,2));saliencyMap;zeros(cut_pixels,size(saliencyMap,2))];
-    imwrite(saliencyMap,[Dir_result im_name(1:end-4) '_WSC.png']); 
+    imwrite(saliencyMap,[Dir_result im_name '.png']);
 end
 
 
diff --git a/WSC_saliency.m b/WSC_saliency.m
index 01f83f6..b92e9d5 100644
--- a/WSC_saliency.m
+++ b/WSC_saliency.m
@@ -12,8 +12,8 @@ function saliencyMap=WSC_saliency(F1,d1, F2,d2, param,superpixel,num_bins,focus_
 loop_max = 10;
 
 %set the merge parameters
-Merge.E1=3.5;
-Merge.E2=1;
+Merge.E1=3.5;%3.5
+Merge.E2=1;%1
 A1 = similarity_matrix(F1,superpixel);
 A2 = similarity_matrix(F2,superpixel);
 
@@ -25,9 +25,9 @@ shortest_path=superpixel.shortest_path;
 converge=false;
 
 %% Compute the weight for the first weighted sparse coding: the dictionnary is the background
-[W1,W2,D1,D2]= compute_LassoWeight_Back(superpixel,Merge,num_bins,focus_feature,F1,F2,d1,d2);
-sal_back1 = weighted_sparse_sal(F1,D1,W1,param,'back');
-sal_back2 = weighted_sparse_sal(F2,D2,W2,param,'back');
+[W1,W2,D1,D2]= compute_LassoWeight_Back(superpixel,Merge,num_bins,focus_feature,F1,F2,d2,d2);
+sal_back1 = weighted_sparse_sal1(F1,D1,'back');
+sal_back2 = weighted_sparse_sal1(F2,D2,'back');
 
 
 %% Get Initial Salient Dictionary
@@ -36,15 +36,17 @@ sal_back2 = weighted_sparse_sal(F2,D2,W2,param,'back');
 
 W1=get_LassoWeight(F1,Fore_matrix1,fore_index1,superpixel,'H',num_bins,shortest_path,false,focus_feature);
 W2=get_LassoWeight(F2,Fore_matrix2,fore_index2,superpixel,'A',num_bins,shortest_path,false,focus_feature);
-sal_err1 = weighted_sparse_sal(F1,Fore_matrix1,W1,param,'sal');
-sal_err2 = weighted_sparse_sal(F2,Fore_matrix2,W2,param,'sal');   
+sal_err1 = weighted_sparse_sal1(F1,Fore_matrix1,'sal');
+sal_err2 = weighted_sparse_sal1(F2,Fore_matrix2,'sal');
 
 sal_1= center_enhance(superpixel,sal_err1,A1);
 sal_2= center_enhance(superpixel,sal_err2,A2);
+%sal_1=sal_err1';
+%sal_2=sal_err2';
 sal_old = sal_err1+sal_err2;
 
 S_combined = mat2gray(sal_1)+mat2gray(sal_2);
-S_combined(S_combined>1)=1;
+%S_combined(S_combined>1)=1;
     
 %% Iteratively Refine Salient Dictionary
 loop=2;
@@ -56,8 +58,8 @@ while ~converge
     W1=get_LassoWeight(F1,Fore_matrix1,fore_index,superpixel,'H',num_bins,shortest_path,false,focus_feature);
     W2=get_LassoWeight(F2,Fore_matrix2,fore_index,superpixel,'A',num_bins,shortest_path,false,focus_feature);
     
-    sal_1 = weighted_sparse_sal(F1,Fore_matrix1,W1,param,'sal');
-    sal_2 = weighted_sparse_sal(F2,Fore_matrix2,W2,param,'sal'); 
+    sal_1 = weighted_sparse_sal1(F1,Fore_matrix1,'sal');
+    sal_2 = weighted_sparse_sal1(F2,Fore_matrix2,'sal');
     sal = sal_1+sal_2;
     
     sal_err1=mat2gray(sal_err1.*sal_1).*get_center_cue(superpixel,sal_err1);
@@ -68,7 +70,7 @@ while ~converge
     sal_2= center_enhance(superpixel,sal_err2,A2);         
     
     S_combined = mat2gray(sal_1)+mat2gray(sal_2);
-    S_combined(S_combined>1)=1;
+    %S_combined(S_combined>1)=1;%>1
 
 
     [haveconverged,e]=converge_test(sal,sal_old);
@@ -92,7 +94,7 @@ for i=1:seg_num
 end
 
 S = mat2gray(SaliencyMap_error);
-S(S<0.4)=0;
+%S(S<0.5)=0;%0.5,0.9
 saliencyMap= S;
 end
 
@@ -101,7 +103,7 @@ function [haveconverged, e]=converge_test(A,A_old)
 A=mat2gray(A);
 A_old=mat2gray(A_old);
 e=sum(abs(A-A_old));
-if e<0.0001*sum(A) %MSRA
+if e<0.0001*sum(A) %MSRA0.0001
     haveconverged=true;
 else
     haveconverged=false;
diff --git a/compute_focus_stack_feature.m b/compute_focus_stack_feature.m
index 1527821..3b8587c 100644
--- a/compute_focus_stack_feature.m
+++ b/compute_focus_stack_feature.m
@@ -18,11 +18,11 @@ if isempty(focus_imnames) %there's no focus stack of the image
         Out= [Dir_focus_result  name '.png'];
         imwrite(mat2gray(infocus_stack(1).image),Out);            
     end
-elseif exist([Dir_focus_result name '_value.mat'],'file')
-    fprintf('focus stack of image %s already exists, skipping... \n', im_name);
-    infocus_stack=load([Dir_focus_result name '_value.mat']);
-    infocus_stack=infocus_stack.infocus_stack;
-    focus_feature.choose=1;
+% elseif exist([Dir_focus_result name '_value.mat'],'file')
+%     fprintf('focus stack of image %s already exists, skipping... \n', im_name);
+%     infocus_stack=load([Dir_focus_result name '_value.mat']);
+%     infocus_stack=infocus_stack.infocus_stack;
+%     focus_feature.choose=1;
 else
     focus_feature.choose=1;
     infocus_stack=get_image_stack(im_name,Dir_focus,Dir_focus_result,superpixel,savefile);
diff --git a/generate_superpixel.m b/generate_superpixel.m
index 7149a7c..fcfc805 100644
--- a/generate_superpixel.m
+++ b/generate_superpixel.m
@@ -2,11 +2,11 @@ function superpixel=generate_superpixel(img,imname_dir,imname,supdir,spnumber)
 
 name=imname(1:find(imname=='.')-1);
 
-if exist([supdir name '.mat'],'file')
-    fprintf('Super-pixels of image %s already exists, skipping... \n', imname);
-    superpixel=load([supdir name]);
-    superpixel=superpixel.superpixel;
-else
+%if exist([supdir name '.mat'],'file')
+    %fprintf('Super-pixels of image %s already exists, skipping... \n', imname);
+    %superpixel=load([supdir name]);
+    %superpixel=superpixel.superpixel;
+%else
     [m,n,k] = size(img);
     seg_rbgmap=zeros(size(img));
     imname_dir_seg=[imname_dir(1:end-4) '.bmp'];
@@ -69,7 +69,7 @@ else
     save([supdir name],'superpixel'); 
 end
 
-end
+%end
 
 function shortest_path=generate_shortestpath(adj_matrix)
     shortest_path = adj_matrix;
diff --git a/funcs/saliency/get_LassoWeight.m b/funcs/saliency/get_LassoWeight.m
index a7597e6..b8c1c7c 100644
--- a/funcs/saliency/get_LassoWeight.m
+++ b/funcs/saliency/get_LassoWeight.m
@@ -19,7 +19,7 @@ end
 for i=1:back_size  
     dis_color=F_color-repmat(D_color(i,:),seg_num,1);  %color differences between each superpixel and each dictionary member
     
-    dis_texture = F(:,pos:pos+35) - repmat(D(i,pos:pos+35), seg_num, 1);
+    dis_texture = F(:,pos:pos+5) - repmat(D(i,pos:pos+5), seg_num, 1);%+35
     dis_value = sum(dis_texture.^2, 2);
     W_texture(i,:) = sqrt(dis_value');
 
